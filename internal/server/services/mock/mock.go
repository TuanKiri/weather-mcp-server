// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/services/services.go
//
// Generated by this command:
//
//	mockgen -source=./internal/server/services/services.go -destination=internal/server/services/mock/mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	services "github.com/TuanKiri/weather-mcp-server/internal/server/services"
	models "github.com/TuanKiri/weather-mcp-server/pkg/weatherapi/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateRenderer is a mock of TemplateRenderer interface.
type MockTemplateRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRendererMockRecorder
	isgomock struct{}
}

// MockTemplateRendererMockRecorder is the mock recorder for MockTemplateRenderer.
type MockTemplateRendererMockRecorder struct {
	mock *MockTemplateRenderer
}

// NewMockTemplateRenderer creates a new mock instance.
func NewMockTemplateRenderer(ctrl *gomock.Controller) *MockTemplateRenderer {
	mock := &MockTemplateRenderer{ctrl: ctrl}
	mock.recorder = &MockTemplateRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRenderer) EXPECT() *MockTemplateRendererMockRecorder {
	return m.recorder
}

// ExecuteTemplate mocks base method.
func (m *MockTemplateRenderer) ExecuteTemplate(wr io.Writer, name string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTemplate", wr, name, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTemplate indicates an expected call of ExecuteTemplate.
func (mr *MockTemplateRendererMockRecorder) ExecuteTemplate(wr, name, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTemplate", reflect.TypeOf((*MockTemplateRenderer)(nil).ExecuteTemplate), wr, name, data)
}

// MockWeatherAPIProvider is a mock of WeatherAPIProvider interface.
type MockWeatherAPIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherAPIProviderMockRecorder
	isgomock struct{}
}

// MockWeatherAPIProviderMockRecorder is the mock recorder for MockWeatherAPIProvider.
type MockWeatherAPIProviderMockRecorder struct {
	mock *MockWeatherAPIProvider
}

// NewMockWeatherAPIProvider creates a new mock instance.
func NewMockWeatherAPIProvider(ctrl *gomock.Controller) *MockWeatherAPIProvider {
	mock := &MockWeatherAPIProvider{ctrl: ctrl}
	mock.recorder = &MockWeatherAPIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherAPIProvider) EXPECT() *MockWeatherAPIProviderMockRecorder {
	return m.recorder
}

// Current mocks base method.
func (m *MockWeatherAPIProvider) Current(ctx context.Context, city string) (*models.CurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current", ctx, city)
	ret0, _ := ret[0].(*models.CurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockWeatherAPIProviderMockRecorder) Current(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockWeatherAPIProvider)(nil).Current), ctx, city)
}

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
	isgomock struct{}
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// Weather mocks base method.
func (m *MockServices) Weather() services.WeatherService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weather")
	ret0, _ := ret[0].(services.WeatherService)
	return ret0
}

// Weather indicates an expected call of Weather.
func (mr *MockServicesMockRecorder) Weather() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weather", reflect.TypeOf((*MockServices)(nil).Weather))
}

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
	isgomock struct{}
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// Current mocks base method.
func (m *MockWeatherService) Current(ctx context.Context, city string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current", ctx, city)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockWeatherServiceMockRecorder) Current(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockWeatherService)(nil).Current), ctx, city)
}
